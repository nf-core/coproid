@article{DITommaso:2017,
author = {{DI Tommaso}, Paolo and Chatzou, Maria and Floden, Evan W. and Barja, Pablo Prieto and Palumbo, Emilio and Notredame, Cedric},
doi = {10.1038/nbt.3820},
issn = {1546-1696},
journal = {Nature Biotechnology 2017 35:4},
keywords = {Computational biology and bioinformatics,Data publication and archiving},
month = {apr},
number = {4},
pages = {316--319},
pmid = {28398311},
publisher = {Nature Publishing Group},
title = {{Nextflow enables reproducible computational workflows}},
url = {https://www.nature.com/articles/nbt.3820},
volume = {35},
year = {2017}
}

@article{Ewels:2020,
   author = {Ewels, Philip and Peltzer, Alexander and Fillinger, Sven and Patel, Harshil and Alneberg, Johannes and Wilm, Andreas and Garcia, Maxime Ulysse and Di Tommaso, Paolo and Nahnsen, Sven},
   doi = {10.1038/s41587-020-0439-x},
   issn = {1087-0156, 1546-1696},
   journal = {Nature Biotechnology},
   month = {mar},
   volume = {38},
   number = {3},
   pages = {276-278},
   pmid = {32055031},
   publisher = {Nature Publishing Group},
   title = {The nf-core framework for community-curated bioinformatics pipelines},
   url = {https://www.nature.com/articles/s41587-020-0439-x},
   year = {2020}
}

@misc{nfcore,
   author = {Ewels, Philip and Peltzer, Alexander and Fillinger, Sven and Patel, Harshil and Alneberg, Johannes and Wilm, Andreas and Garcia, Maxime Ulysse and Di Tommaso, Paolo and Nahnsen, Sven},
   title = {The nf-core framework for community-curated bioinformatics pipelines},
   month = {2022/05//},
   abstract = {Repository to host tool-specific module files for the Nextflow DSL2 community!},
   url = {https://github.com/nf-core/tools},
   doi = {10.1038/s41587-020-0439-x},
   year = {2022},
   type = {Computer Program}
}

@article{Langmead:2018,
    author = {Langmead, Ben and Wilks, Christopher and Antonescu, Valentin and Charles, Rone},
    title = {Scaling read aligners to hundreds of threads on general-purpose processors},
    journal = {Bioinformatics},
    volume = {35},
    number = {3},
    pages = {421-432},
    year = {2018},
    month = {07},
    abstract = {General-purpose processors can now contain many dozens of processor cores and support hundreds of simultaneous threads of execution. To make best use of these threads, genomics software must contend with new and subtle computer architecture issues. We discuss some of these and propose methods for improving thread scaling in tools that analyze each read independently, such as read aligners.We implement these methods in new versions of Bowtie, Bowtie 2 and HISAT. We greatly improve thread scaling in many scenarios, including on the recent Intel Xeon Phi architecture. We also highlight how bottlenecks are exacerbated by variable-record-length file formats like FASTQ and suggest changes that enable superior scaling.Experiments for this study: https://github.com/BenLangmead/bowtie-scaling.http://bowtie-bio.sourceforge.net.http://bowtie-bio.sourceforge.net/bowtie2.http://www.ccb.jhu.edu/software/hisatSupplementary data are available at Bioinformatics online.},
    issn = {1367-4803},
    doi = {10.1093/bioinformatics/bty648},
    url = {https://doi.org/10.1093/bioinformatics/bty648},
    eprint = {https://academic.oup.com/bioinformatics/article-pdf/35/3/421/48965413/bioinformatics\_35\_3\_421.pdf},
}

@article{Chen:2018,
abstract = {Motivation Quality control and preprocessing of FASTQ files are essential to providing clean data for downstream analysis. Traditionally, a different tool is used for each operation, such as quality control, adapter trimming and quality filtering. These tools are often insufficiently fast as most are developed using high-level programming languages (e.g. Python and Java) and provide limited multi-threading support. Reading and loading data multiple times also renders preprocessing slow and I/O inefficient. Results We developed fastp as an ultra-fast FASTQ preprocessor with useful quality control and data-filtering features. It can perform quality control, adapter trimming, quality filtering, per-read quality pruning and many other operations with a single scan of the FASTQ data. This tool is developed in C++ and has multi-threading support. Based on our evaluation, fastp is 2-5 times faster than other FASTQ preprocessing tools such as Trimmomatic or Cutadapt despite performing far more operations than similar tools. Availability and implementation The open-source code and corresponding instructions are available at https://github.com/OpenGene/fastp.},
author = {Chen, Shifu and Zhou, Yanqing and Chen, Yaru and Gu, Jia},
doi = {10.1093/BIOINFORMATICS/BTY560},
issn = {1367-4803},
journal = {Bioinformatics},
keywords = {Contact,chen@haploxcom},
month = {sep},
number = {17},
pages = {i884--i890},
pmid = {30423086},
publisher = {Oxford Academic},
title = {{fastp: an ultra-fast all-in-one FASTQ preprocessor}},
url = {https://academic.oup.com/bioinformatics/article/34/17/i884/5093234},
volume = {34},
year = {2018}
}

@article{Wood:2019,
abstract = {Although Kraken's k-mer-based approach provides a fast taxonomic classification of metagenomic sequence data, its large memory requirements can be limiting for some applications. Kraken 2 improves upon Kraken 1 by reducing memory usage by 85%, allowing greater amounts of reference genomic data to be used, while maintaining high accuracy and increasing speed fivefold. Kraken 2 also introduces a translated search mode, providing increased sensitivity in viral metagenomics analysis.},
author = {Wood, Derrick E. and Lu, Jennifer and Langmead, Ben},
doi = {10.1186/S13059-019-1891-0},
issn = {1474760X},
journal = {Genome Biology},
keywords = {Alignment-free methods,Metagenomics,Metagenomics classification,Microbiome,Minimizers,Probabilistic data structures},
month = {nov},
number = {1},
pages = {1--13},
pmid = {31779668},
publisher = {BioMed Central Ltd.},
title = {{Improved metagenomic analysis with Kraken 2}},
url = {https://genomebiology.biomedcentral.com/articles/10.1186/s13059-019-1891-0},
volume = {20},
year = {2019}
}

@article{Lu:2022,
abstract = {Metagenomic experiments expose the wide range of microscopic organisms in any microbial environment through high-throughput DNA sequencing. The computational analysis of the sequencing data is critical for the accurate and complete characterization of the microbial community. To facilitate efficient and reproducible metagenomic analysis, we introduce a step-by-step protocol for the Kraken suite, an end-to-end pipeline for the classification, quantification and visualization of metagenomic datasets. Our protocol describes the execution of the Kraken programs, via a sequence of easy-to-use scripts, in two scenarios: (1) quantification of the species in a given metagenomics sample; and (2) detection of a pathogenic agent from a clinical sample taken from a human patient. The protocol, which is executed within 1–2 h, is targeted to biologists and clinicians working in microbiome or metagenomics analysis who are familiar with the Unix command-line environment.},
author = {Lu, Jennifer and Rincon, Natalia and Wood, Derrick E. and Breitwieser, Florian P. and Pockrandt, Christopher and Langmead, Ben and Salzberg, Steven L. and Steinegger, Martin},
doi = {10.1038/S41596-022-00738-Y},
issn = {17502799},
journal = {Nature protocols},
month = {dec},
number = {12},
pages = {2815},
pmid = {36171387},
publisher = {NIH Public Access},
title = {{Metagenome analysis using the Kraken software suite}},
url = {/pmc/articles/PMC9725748/ /pmc/articles/PMC9725748/?report=abstract https://www.ncbi.nlm.nih.gov/pmc/articles/PMC9725748/},
volume = {17},
year = {2022}
}

@online{Andrews:2010,
    title = {Babraham Bioinformatics - {FastQC} A Quality Control tool for High Throughput Sequence Data},
    url = {https://www.bioinformatics.babraham.ac.uk/projects/fastqc/},
    author = {Andrews, S},
    urldate = {2023-09-20},
    date = {2010}
}

@article{Ewels:2016,
    title = {{MultiQC}: summarize analysis results for multiple tools and samples in a single report},
    volume = {32},
    issn = {1367-4811, 1367-4803},
    url = {https://academic.oup.com/bioinformatics/article/32/19/3047/2196507},
    doi = {10.1093/bioinformatics/btw354},
    shorttitle = {{MultiQC}},
    abstract = {Abstract
            Motivation: Fast and accurate quality control is essential for studies involving next-generation sequencing data. Whilst numerous tools exist to quantify {QC} metrics, there is no common approach to flexibly integrate these across tools and large sample sets. Assessing analysis results across an entire project can be time consuming and error prone; batch effects and outlier samples can easily be missed in the early stages of analysis.
            Results: We present {MultiQC}, a tool to create a single report visualising output from multiple tools across many samples, enabling global trends and biases to be quickly identified. {MultiQC} can plot data from many common bioinformatics tools and is built to allow easy extension and customization.
            Availability and implementation: {MultiQC} is available with an {GNU} {GPLv}3 license on {GitHub}, the Python Package Index and Bioconda. Documentation and example reports are available at http://multiqc.info
            Contact:  phil.ewels@scilifelab.se},
    pages = {3047--3048},
    number = {19},
    journaltitle = {Bioinformatics},
    author = {Ewels, Philip and Magnusson, Måns and Lundin, Sverker and Käller, Max},
    urldate = {2023-10-05},
    date = {2016-10-01},
    langid = {english}
}

@article{Danecek:2021,
    title = {Twelve years of {SAMtools} and {BCFtools}},
    volume = {10},
    issn = {2047-217X},
    url = {https://doi.org/10.1093/gigascience/giab008},
    doi = {10.1093/gigascience/giab008},
    abstract = {{SAMtools} and {BCFtools} are widely used programs for processing and analysing high-throughput sequencing data. They include tools for file format conversion and manipulation, sorting, querying, statistics, variant calling, and effect analysis amongst other methods.The first version appeared online 12 years ago and has been maintained and further developed ever since, with many new features and improvements added over the years. The {SAMtools} and {BCFtools} packages represent a unique collection of tools that have been used in numerous other software projects and countless genomic pipelines.Both {SAMtools} and {BCFtools} are freely available on {GitHub} under the permissive {MIT} licence, free for both non-commercial and commercial use. Both packages have been installed \&gt;1 million times via Bioconda. The source code and documentation are available from https://www.htslib.org.},
    pages = {giab008},
    number = {2},
    journaltitle = {{GigaScience}},
    shortjournal = {{GigaScience}},
    author = {Danecek, Petr and Bonfield, James K and Liddle, Jennifer and Marshall, John and Ohan, Valeriu and Pollard, Martin O and Whitwham, Andrew and Keane, Thomas and {McCarthy}, Shane A and Davies, Robert M and Li, Heng},
    urldate = {2023-09-06},
    date = {2021-02-01}
}

@article{Danecek:2021,
    title = {Twelve years of {SAMtools} and {BCFtools}},
    volume = {10},
    issn = {2047-217X},
    url = {https://doi.org/10.1093/gigascience/giab008},
    doi = {10.1093/gigascience/giab008},
    abstract = {{SAMtools} and {BCFtools} are widely used programs for processing and analysing high-throughput sequencing data. They include tools for file format conversion and manipulation, sorting, querying, statistics, variant calling, and effect analysis amongst other methods.The first version appeared online 12 years ago and has been maintained and further developed ever since, with many new features and improvements added over the years. The {SAMtools} and {BCFtools} packages represent a unique collection of tools that have been used in numerous other software projects and countless genomic pipelines.Both {SAMtools} and {BCFtools} are freely available on {GitHub} under the permissive {MIT} licence, free for both non-commercial and commercial use. Both packages have been installed \&gt;1 million times via Bioconda. The source code and documentation are available from https://www.htslib.org.},
    pages = {giab008},
    number = {2},
    journaltitle = {{GigaScience}},
    shortjournal = {{GigaScience}},
    author = {Danecek, Petr and Bonfield, James K and Liddle, Jennifer and Marshall, John and Ohan, Valeriu and Pollard, Martin O and Whitwham, Andrew and Keane, Thomas and {McCarthy}, Shane A and Davies, Robert M and Li, Heng},
    urldate = {2023-09-06},
    date = {2021-02-01}
}

@article{Borry:2019,
	journal = {Journal of Open Source Software},
	doi = {10.21105/joss.01540},
	issn = {2475-9066},
	number = {41},
	publisher = {The Open Journal},
	title = {Sourcepredict: Prediction of metagenomic sample sources using dimension reduction followed by machine learning classification},
	url = {http://dx.doi.org/10.21105/joss.01540},
	volume = {4},
	author = {Borry, Maxime},
	pages = {1540},
	date = {2019-09-04},
	year = {2019},
	month = {9},
	day = {4}
}

@article{Borry:2022,
  doi = {10.21105/joss.04360},
  url = {https://doi.org/10.21105/joss.04360},
  year = {2022},
  publisher = {The Open Journal},
  volume = {7},
  number = {74},
  pages = {4360},
  author = {Maxime Borry and Alexander Hübner and Christina Warinner},
  title = {sam2lca: Lowest Common Ancestor for SAM/BAM/CRAM alignment files},
  journal = {Journal of Open Source Software}
}

@article{Borry:2021,
    author = {Borry, Maxime and Hübner, Alexander and Rohrlach, Adam B. and Warinner, Christina},
    doi = {10.7717/peerj.11845},
    issn = {2167-8359},
    journal = {PeerJ},
    language = {en},
    month = {July},
    note = {Publisher: PeerJ Inc.},
    pages = {e11845},
    shorttitle = {PyDamage},
    title = {PyDamage: automated ancient damage identification and estimation for contigs in ancient DNA de novo assembly},
    url = {https://peerj.com/articles/11845},
    urldate = {2021-07-27},
    volume = {9},
    year = {2021}
}

@article{Neukamm:2021,
    author = {Neukamm, Judith and Peltzer, Alexander and Nieselt, Kay},
    title = {DamageProfiler: fast damage pattern calculation for ancient DNA},
    journal = {Bioinformatics},
    volume = {37},
    number = {20},
    pages = {3652-3653},
    year = {2021},
    month = {04},
    abstract = {In ancient DNA research, the authentication of ancient samples based on specific features remains a crucial step in data analysis. Because of this central importance, researchers lacking deeper programming knowledge should be able to run a basic damage authentication analysis. Such software should be user-friendly and easy to integrate into an analysis pipeline.DamageProfiler is a Java-based, stand-alone software to determine damage patterns in ancient DNA. The results are provided in various file formats and plots for further processing. DamageProfiler has an intuitive graphical as well as command line interface that allows the tool to be easily embedded into an analysis pipeline.All of the source code is freely available on GitHub (https://github.com/Integrative-Transcriptomics/DamageProfiler).Supplementary data are available at Bioinformatics online.},
    issn = {1367-4803},
    doi = {10.1093/bioinformatics/btab190},
    url = {https://doi.org/10.1093/bioinformatics/btab190},
    eprint = {https://academic.oup.com/bioinformatics/article-pdf/37/20/3652/50338221/btab190.pdf},
}

@software{Allaire:2024,
author = {Allaire, J.J. and Teague, Charles and Scheidegger, Carlos and Xie, Yihui and Dervieux, Christophe and Woodhull, Gordon},
doi = {10.5281/zenodo.5960048},
month = nov,
title = {{Quarto}},
url = {https://github.com/quarto-dev/quarto-cli},
version = {1.6},
year = {2024}
}
